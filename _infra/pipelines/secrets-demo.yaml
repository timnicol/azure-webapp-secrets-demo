trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - _infra/*

variables:
  AadAuthClientIdSecretName: 'secretsdemo--aadclientid'
  AadAuthClientSecretSecretName: 'secretsdemo--aadclientsecret'
  AppInsightsKeySecretName: 'secretsdemo--appinsightskey'
  StorageConnectionStringSecretName: 'secretsdemo--storageconnstring'
  BuildConfiguration: 'Release'
  EnvironmentCodeSecDev: 'secur'
  EnvironmentSecDev: 'Secure Development'
  EnvironmentCodeInSecDev: 'insec'
  EnvironmentInSecDev: 'Insecure Development'
  NonProdSubscription: 'nicol-io-azure-connect'
  Region: 'australiasoutheast'
  RegionCode: 'mel'
  ResourceGroup: 'secrets-demo-rg'
  Workload: 'sec'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build and Package
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core sdk
      inputs:
        packageType: sdk
        version: 2.2.207
    - task: DotNetCoreCLI@2
      displayName: Build Function
      inputs:
        command: build
        projects: 'src/web-api/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Stage Function Artifacts'
      inputs:
        command: publish
        publishWebProjects: false
        projects: src/web-api/*.csproj
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/function'
    - task: PublishBuildArtifacts@1
      displayName: Publish Build Artifacts
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: build
  - job: Publish
    displayName: Publish scripts and artefacts
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish ARM Artifacts
      inputs:
        artifactName: arm
        targetPath: '_infra/arm'
- stage: Deploy
  displayName: Deploy to Development Environment
  jobs:
  - deployment: DeploySecure
    displayName: Deploy Secure
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(EnvironmentSecDev)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deploy_steps_secure.yaml
            parameters:
              environment: $(EnvironmentCodeSecDev)
              subscription: $(NonProdSubscription)
              region: $(Region)
              regionCode: $(RegionCode)
              resourceGroup: $(ResourceGroup)
  - deployment: DeployInSecure
    displayName: Deploy Insecure
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(EnvironmentInSecDev)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deploy_steps_insecure.yaml
            parameters:
              environment: $(EnvironmentCodeInSecDev)
              subscription: $(NonProdSubscription)
              region: $(Region)
              regionCode: $(RegionCode)
              resourceGroup: $(ResourceGroup)